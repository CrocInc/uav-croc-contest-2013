/* Auto-generated by genmsg_cpp for file /home/mike/ros/cyphy_serial_driver/msg/mikoImu.msg */
#ifndef CYPHY_SERIAL_DRIVER_MESSAGE_MIKOIMU_H
#define CYPHY_SERIAL_DRIVER_MESSAGE_MIKOIMU_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Vector3.h"

namespace cyphy_serial_driver
{
template <class ContainerAllocator>
struct mikoImu_ {
  typedef mikoImu_<ContainerAllocator> Type;

  mikoImu_()
  : header()
  , anglePitch(0.0)
  , angleRoll(0.0)
  , angleYaw(0.0)
  , stick_throttle(0)
  , barome_height(0)
  , batt(0)
  , extern_on(0)
  , linear_acceleration()
  , debugData()
  {
    debugData.assign(0);
  }

  mikoImu_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , anglePitch(0.0)
  , angleRoll(0.0)
  , angleYaw(0.0)
  , stick_throttle(0)
  , barome_height(0)
  , batt(0)
  , extern_on(0)
  , linear_acceleration(_alloc)
  , debugData()
  {
    debugData.assign(0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _anglePitch_type;
  double anglePitch;

  typedef double _angleRoll_type;
  double angleRoll;

  typedef double _angleYaw_type;
  double angleYaw;

  typedef int32_t _stick_throttle_type;
  int32_t stick_throttle;

  typedef int32_t _barome_height_type;
  int32_t barome_height;

  typedef int32_t _batt_type;
  int32_t batt;

  typedef int32_t _extern_on_type;
  int32_t extern_on;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  linear_acceleration;

  typedef boost::array<int32_t, 32>  _debugData_type;
  boost::array<int32_t, 32>  debugData;


  typedef boost::shared_ptr< ::cyphy_serial_driver::mikoImu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyphy_serial_driver::mikoImu_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct mikoImu
typedef  ::cyphy_serial_driver::mikoImu_<std::allocator<void> > mikoImu;

typedef boost::shared_ptr< ::cyphy_serial_driver::mikoImu> mikoImuPtr;
typedef boost::shared_ptr< ::cyphy_serial_driver::mikoImu const> mikoImuConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cyphy_serial_driver::mikoImu_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cyphy_serial_driver::mikoImu_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cyphy_serial_driver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cyphy_serial_driver::mikoImu_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cyphy_serial_driver::mikoImu_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cyphy_serial_driver::mikoImu_<ContainerAllocator> > {
  static const char* value() 
  {
    return "76691c6d34f503f607812cc4761ad3a0";
  }

  static const char* value(const  ::cyphy_serial_driver::mikoImu_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x76691c6d34f503f6ULL;
  static const uint64_t static_value2 = 0x07812cc4761ad3a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::cyphy_serial_driver::mikoImu_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cyphy_serial_driver/mikoImu";
  }

  static const char* value(const  ::cyphy_serial_driver::mikoImu_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cyphy_serial_driver::mikoImu_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This is a message to hold data from an Mikrokopter IMU (Inertial Measurement Unit)\n\
#\n\
# Accelerations should be in m/s^2 (not in g's), and rotational angle should be in rad\n\
#\n\
# by Inkyu\n\
\n\
Header header\n\
\n\
float64 anglePitch\n\
float64 angleRoll\n\
float64 angleYaw\n\
int32 stick_throttle\n\
int32 barome_height\n\
int32 batt\n\
int32 extern_on\n\
\n\
geometry_msgs/Vector3 linear_acceleration\n\
\n\
int32[32] debugData\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::cyphy_serial_driver::mikoImu_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::cyphy_serial_driver::mikoImu_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::cyphy_serial_driver::mikoImu_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cyphy_serial_driver::mikoImu_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.anglePitch);
    stream.next(m.angleRoll);
    stream.next(m.angleYaw);
    stream.next(m.stick_throttle);
    stream.next(m.barome_height);
    stream.next(m.batt);
    stream.next(m.extern_on);
    stream.next(m.linear_acceleration);
    stream.next(m.debugData);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mikoImu_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyphy_serial_driver::mikoImu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cyphy_serial_driver::mikoImu_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "anglePitch: ";
    Printer<double>::stream(s, indent + "  ", v.anglePitch);
    s << indent << "angleRoll: ";
    Printer<double>::stream(s, indent + "  ", v.angleRoll);
    s << indent << "angleYaw: ";
    Printer<double>::stream(s, indent + "  ", v.angleYaw);
    s << indent << "stick_throttle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stick_throttle);
    s << indent << "barome_height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.barome_height);
    s << indent << "batt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.batt);
    s << indent << "extern_on: ";
    Printer<int32_t>::stream(s, indent + "  ", v.extern_on);
    s << indent << "linear_acceleration: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "debugData[]" << std::endl;
    for (size_t i = 0; i < v.debugData.size(); ++i)
    {
      s << indent << "  debugData[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.debugData[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CYPHY_SERIAL_DRIVER_MESSAGE_MIKOIMU_H

